import numpy as np
import time
import multiprocessing as mp

start_time = time.time()

# global variable
plaintexts = np.load('textin_attack.npy')       # (20000, 16), uint8
traces = np.load('traces_attack_int16.npy')     # (20000, 24000), int16
guess_key = np.arange(256).reshape(1, -1)  # [0, 1, 2, ..., 255] => (1, 256)
result = []     # to store the correct key

sbox = np.array([
[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
[0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
[0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
[0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
[0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
[0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
[0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
[0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
[0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
[0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
[0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
[0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
[0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
[0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
[0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
[0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]
])

# Time stamp of KeyAdd
time_map = {0: [630, 668], 1: [678, 710], 2: [717, 750], 3: [757, 790],
            4: [797, 830], 5: [837, 868], 6: [877, 910], 7: [910, 948],
            8: [957, 984], 9: [998, 1027], 10: [1030, 1068], 11: [1077, 1110],
            12: [1110, 1148], 13: [1170, 1190], 14: [1190, 1226], 15: [1230, 1245]}


def hamming_weight(num):    # count how many 1 we have in binary
    count = 0
    while num:              # stop when num=0
        count += num & 1    # if LSB=1, then count+1
        num >>= 1           # right shift
    return count            # return the value of hamming weight


def process_key(position):
    # KeyAdd
    lut_sbx_input = np.bitwise_xor(np.reshape(plaintexts[:, position], (-1, 1)), guess_key)  # (20000, 256)
    # print(lut_sbx_input[:, 255].shape)
    # iv = np.empty((0, 256), dtype=np.uint8)
    # for n in range(20000):  # number of traces
    #     # calculate the index of sbox
    #     first_hex = np.bitwise_and(lut_sbx_input[n, :], 0xf0) >> 4
    #     second_hex = np.bitwise_and(lut_sbx_input[n, :], 0x0f)
    #     sbx_output = sbox[first_hex, second_hex]  # (256,)
    #
    #     # calculate the intermediate value
    #     iv = np.append(iv, [sbx_output], axis=0)  # (20000, 256)

    # apply hamming weight on iv
    hm = np.vectorize(hamming_weight)(lut_sbx_input)  # (20000, 256)

    # stochastic analysis
    max_r = []
    for k in range(256):  # rows correspond to key hypothesis
        r = []
        # KeyAdd
        for t in range(time_map[position][0], time_map[position][1]+1):  # columns correspond to data points (time axis)
            std_h = np.std(hm[:, k])        # standard deviation of hamming weight matrix
            std_t = np.std(traces[:, t])    # standard deviation of traces matrix
            cov = np.cov(hm[:, k], traces[:, t], bias=True)[0][1]   # covariance of both matrix
            r_element = np.abs(cov / (std_h * std_t))
            r.append(r_element)

        max_r.append(np.amax(r))  # get the maximum value in the whole row

    # result.append(np.argmax(max_r))
    return np.argmax(max_r)


if __name__ == '__main__':
    with mp.Pool(processes=4) as pool:
        # Use the map method to apply the function to each position in parallel
        result = pool.map(process_key, range(16))   # range(16)

    print("Key: ", result)

    end_time = time.time()
    elapsed_time = end_time - start_time
    print("Time: ", elapsed_time)



